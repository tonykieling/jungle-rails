X1- rails g model user first_name last_name email password


X2- rake db:migrate


X3- in config/routes.rb add:
    get '/signup' => 'users#new'
    post '/users' => 'users#create'


X4- create a users controller
# app/controllers/users_controller.rb
  class UsersController < ApplicationController
  end


X5- Add a new action (for rendering the signup form) and a create action (for receiving the form and creating a user with the form's parameters.):
# app/controllers/users_controller.rb
class UsersController < ApplicationController
    def new
    end

    def create
    end   
end


X6- Create the view file where we put the signup form.
<!-- app/views/users/new.html.erb -->
<h1>Signup!</h1>
<%= form_for :user, url: '/users' do |f| %>
  First Name: <%= f.text_field :first_name %>
  Last Name: <%= f.text_field :last_name %>
  Email: <%= f.text_field :email %>
  Password: <%= f.password_field :password %>
  Password Confirmation: <%= f.password_field :password_confirmation %>
  <%= f.submit "Submit" %>
<% end %>


X7- Add logic to create action and add the private user_params method to sanitize the input from the form (this is a new Rails 4 thing and it's required). You might need to adjust the parameters inside the .permit() method based on how you setup your User model.

class UsersController < ApplicationController

def new
end

def create
  user = User.new(user_params)
  if user.save
    session[:user_id] = user.id
    redirect_to '/'
  else
    redirect_to '/signup'
  end
end
private

def user_params
  params.require(:user).permit(:name, :email, :password, :password_confirmation)
end


X8- Go to the User model file and add has_secure_password. This is the line of code that gives our User model authentication methods via bcrypt.
# app/models/user.rb
class User < ActiveRecord::Base
  has_secure_password
end


X9- Run bundle install from the terminal then restart your rails server.


X10- create app/controllers/sessions_controller.rb
class SessionsController < ApplicationController
  def new
  end

  def create
  end

  def destroy
  end
end

X11- create a view app/views/sessions/new.html.erb
<h1>Login</h1>
<%= form_tag '/login' do %>
  Email: <%= text_field_tag :email %>
  Password: <%= password_field_tag :password %>
  <%= submit_tag "Submit" %>
<% end %>


X12- update routes file to include new routes for the sessions controller

  add:
  # routes for: showing users a login form, logging them in, and logging them out
  get '/login' => 'sessions#new'
  post '/login' => 'sessions#create'
  get '/logout' => 'sessions#destroy'


X13- sessions_controller with login and logout logics
  def create
    user = User.find_by_email(params[:email])
    # If the user exists AND the password entered is correct.
    if user && user.authenticate(params[:password])
      # Save the user id inside the browser cookie. This is how we keep the user 
      # logged in when they navigate around our website.
      session[:user_id] = user.id
      redirect_to '/'
    else
    # If user's login doesn't work, send them back to the login form.
      redirect_to '/login'
    end
  end

  def destroy
    session[:user_id] = nil
    redirect_to '/login'
  end

X14- Application controller with new methods to look up the user, if they're logged in, and save their user object to a variable called @current_user.
The helper_method line below current_user allows us to use @current_user in our view files.
Authorize is for sending someone to the login page if they aren't logged in - this is how we keep certain pages our site secure... user's have to login before seeing them.

  protect_from_forgery with: :exception

  def current_user
    @current_user ||= User.find(session[:user_id]) if session[:user_id]
  end
  helper_method :current_user

  def authorize
    redirect_to '/login' unless current_user
  end


15- 

